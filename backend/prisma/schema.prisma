// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int @id @default(autoincrement())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  username        String @unique
  email           String @unique
  hashedPassword  String
  messages        Message[]
  roomMembers     RoomMember[]
  chatRoomBan     UserBannedInChatRoom[]
  chatRoomMute    UserMutedInChatRoom[]
}

model ChatRoom {
  id            Int @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  roomName      String @unique
  password      String?
  isPrivate     Boolean @default(false)
  isDM          Boolean @default(false)
  messages      Message[]
  roomMembers   RoomMember[]
  chatRoomBan   UserBannedInChatRoom[]
  chatRoomMute  UserMutedInChatRoom[]
}
model UserBannedInChatRoom {
  @@id([chatRoomId, userId])
  chatRoomId    Int
  userId        Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  timeLimitedAt DateTime
  user          User @relation(fields: [userId],references: [id])
  chatRoom      ChatRoom @relation(fields: [chatRoomId],references: [id], onDelete: Cascade)
}
model UserMutedInChatRoom {
  @@id([chatRoomId, userId])
  chatRoomId    Int
  userId        Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  timeLimitedAt DateTime
  user          User @relation(fields: [userId],references: [id])
  chatRoom      ChatRoom @relation(fields: [chatRoomId],references: [id], onDelete: Cascade)
}
model RoomMember {
  @@id([userId, chatRoomId])
  joinedAt    DateTime @default(now())
  isOwner     Boolean @default(false)
  userId      Int
  chatRoomId  Int
  user        User @relation(fields: [userId],references: [id])
  chatRoom    ChatRoom @relation(fields: [chatRoomId],references: [id], onDelete: Cascade)
}

model Message {
  id          Int @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  content     String
  userId      Int
  chatRoomId  Int
  user        User @relation(fields: [userId],references: [id])
  chatRoom    ChatRoom @relation(fields: [chatRoomId],references: [id], onDelete: Cascade)
}
