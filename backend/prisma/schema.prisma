// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
// userの情報
model User {
  id              String @id @default(uuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  username        String @unique
  email           String @unique
  hashedPassword  String
  messages        Message[]
  roomMembers     RoomMember[]
  userChatState   UserChatState[]
}
// userが所属しているchatRoomの集合を取得
model ChatRoom {
  id            String @id @default(uuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  roomName      String @unique
  password      String?
  isPrivate     Boolean @default(false)
  isDM          Boolean @default(false)
  messages      Message[]
  roomMembers   RoomMember[]
  userChatState UserChatState[]
}
// チャットルームの管理者からbanされた時にこのテーブルに追加、時間が経ったら削除
// ルームに入る際やチャットを送信するときに
// このテーブルを都度チェックしてbanされてなかったらchatroomに入れる的な使い方
// endedAtに終了時間を渡す感じで使う予定

model UserChatState {
  @@id([chatRoomId, userId, userState])
  chatRoomId    String
  userId        String
  userState       UserChatStateCode
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  endedAt         DateTime
  user            User @relation(fields: [userId],references: [id])
  chatRoom        ChatRoom @relation(fields: [chatRoomId],references: [id], onDelete: Cascade)
}
// chatRoomに参加するときはこのテーブルに追加する
// 抜けたときは削除する
// UserMutedInChatRoom,UserBannedInChatRoomの情報をこのテーブルに持たせれば良くねって思ってるそこのあなた
// このテーブルにban,muteの情報を持たせると、部屋から抜けた際に
// その情報を持っているレコードが削除されてしまってもう一度入るみたいなことができてしまう
model RoomMember {
  @@id([userId, chatRoomId])
  joinedAt    DateTime @default(now())
  role        UserRole @default(USER)
  userId     String
  chatRoomId String
  user        User @relation(fields: [userId],references: [id])
  chatRoom    ChatRoom @relation(fields: [chatRoomId],references: [id], onDelete: Cascade)
}
// chatRoomIdからそのchatRoomのmsg集合を取得したりする
model Message {
  id          String @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  content     String
  userId      String
  chatRoomId  String
  user        User @relation(fields: [userId],references: [id])
  chatRoom    ChatRoom @relation(fields: [chatRoomId],references: [id], onDelete: Cascade)
}

enum UserRole {
  OWNER
  ADMIN
  USER
}

enum UserChatStateCode {
  BANNED
  MUTED
}
