// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// userの情報
model User {
  id             String          @id @default(cuid())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  username       String          @unique @default(uuid())
  email          String          @unique
  hashedPassword String?
  twoFaSecret    String?
  messages       Message[]
  roomMembers    RoomMember[]
  userChatState  UserChatState[]
  userProfile    UserProfile?
  friendship1    Friendship[]    @relation("src")
  friendship2    Friendship[]    @relation("dest")
  auth           Auth?
  Rating         Rating[]
}

model Auth {
  userId       String       @unique
  providerId   String
  providerName String
  authProvider AuthProvider @relation(fields: [providerName], references: [name])
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerName, providerId])
}

model AuthProvider {
  name String @unique
  auth Auth[]
}

// 今のところ画像のみ
model UserProfile {
  userId String @id
  // TODO デフォのバイナリを入れたいけどサイズやデフォ画像が決まってないので？をつけた
  image  Bytes?
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// userが所属しているchatRoomの集合を取得
model ChatRoom {
  id             String          @id @default(cuid())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  roomName       String          @unique
  hashedPassword String?
  isPrivate      Boolean         @default(false)
  isDM           Boolean         @default(false)
  messages       Message[]
  roomMembers    RoomMember[]
  userChatState  UserChatState[]
}

// チャットルームの管理者からbanされた時にこのテーブルに追加、時間が経ったら削除
// ルームに入る際やチャットを送信するときに
// このテーブルを都度チェックしてbanされてなかったらchatroomに入れる的な使い方
// endedAtに終了時間を渡す感じで使う予定
model UserChatState {
  chatRoomId String
  userId     String
  userState  UserChatStateCode
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  endedAt    DateTime
  user       User              @relation(fields: [userId], references: [id])
  chatRoom   ChatRoom          @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)

  @@id([chatRoomId, userId, userState])
}

// chatRoomに参加するときはこのテーブルに追加する
// 抜けたときは削除する
// UserMutedInChatRoom,UserBannedInChatRoomの情報をこのテーブルに持たせれば良くねって思ってるそこのあなた
// このテーブルにban,muteの情報を持たせると、部屋から抜けた際に
// その情報を持っているレコードが削除されてしまってもう一度入るみたいなことができてしまう
model RoomMember {
  joinedAt   DateTime @default(now())
  role       UserRole @default(USER)
  userId     String
  chatRoomId String
  user       User     @relation(fields: [userId], references: [id])
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)

  @@id([userId, chatRoomId])
}

// chatRoomIdからそのchatRoomのmsg集合を取得したりする
model Message {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  content    String
  userId     String
  chatRoomId String
  user       User     @relation(fields: [userId], references: [id])
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
}

model Friendship {
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  srcUserId  String
  destUserId String
  status     FriendshipStatus
  srcUser    User             @relation("src", fields: [srcUserId], references: [id], onDelete: Cascade)
  destUser   User             @relation("dest", fields: [destUserId], references: [id], onDelete: Cascade)

  @@id([srcUserId, destUserId])
}

enum FriendshipStatus {
  Requested
  Accepted
  Blocked
}

enum UserRole {
  OWNER
  ADMIN
  USER
}

enum UserChatStateCode {
  BANNED
  MUTED
}

model Rating {
  userId   String @id
  rating   Int    @default(0)
  userData User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([rating], name: "rating_asc")
}
