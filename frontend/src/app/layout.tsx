'use client';
import './globals.css';
// TODO : Inter なんなのか調べる
// storybook addon-coverage を入れたら、test でエラーが出るようになった。
// Inter コメントアウトしても、特に影響がなかったので一旦コメントアウト
// import { Inter } from 'next/font/google';
import { SnackbarProvider, closeSnackbar } from 'notistack';
import { ThemeProvider } from '@mui/material';
import { useSetAtom } from 'jotai';

import { useSession } from '@/hooks/useSession';
import { theme } from '@/lib/mui';
import { useSessionSocket } from '@/hooks/useSocket';
import { useLogout } from '@/features/user/api/userLogin';
import { currentUserAtom } from '@/stores/jotai';

import StyledComponentsRegistry from '../lib/registry';

// const inter = Inter({ subsets: ['latin'] });

// client sideだとエラー出るので、一旦コメントアウト
// export const metadata = {
//   title: 'Create Next App',
//   description: 'Generated by create next app',
// };

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const setCurrentUserAtom = useSetAtom(currentUserAtom);
  const { logout } = useLogout();

  useSession();

  // TODO : 移動させる
  useSessionSocket('error', (data) => {
    console.log(data);
  });

  useSessionSocket('logout', (data) => {
    // logoutと同じ処理
    console.log('logout', data);
    logout();
  });

  useSessionSocket('joinedRooms', (data) => {
    console.log('joinedRooms', data);
    setCurrentUserAtom((prev) =>
      prev ? { ...prev, joinedRooms: data } : prev,
    );
  });

  useSessionSocket('friendRequests', (data) => {
    // friendRequestの処理を書く
    console.log('friendRequests', data);
    setCurrentUserAtom((prev) =>
      prev ? { ...prev, friendRequests: data } : prev,
    );
  });

  useSessionSocket('friends', (data) => {
    console.log('friends', data);
    setCurrentUserAtom((prev) => (prev ? { ...prev, friends: data } : prev));
  });

  useSessionSocket('blockUsers', (data) => {
    console.log('blockUsers', data);
    setCurrentUserAtom((prev) => (prev ? { ...prev, blockUsers: data } : prev));
  });

  return (
    <html lang="en">
      {/* <body className={inter.className}> */}
      <body>
        <StyledComponentsRegistry>
          <ThemeProvider theme={theme}>
            <SnackbarProvider
              maxSnack={3}
              anchorOrigin={{ vertical: 'top', horizontal: 'right' }}
              action={(snackbarId) => (
                <p onClick={() => closeSnackbar(snackbarId)}>Dismiss</p>
              )}
            >
              {children}
            </SnackbarProvider>
          </ThemeProvider>
        </StyledComponentsRegistry>
      </body>
    </html>
  );
}
